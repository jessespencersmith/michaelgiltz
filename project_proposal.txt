Consider the following files for background:

description.txt
problems.txt
process.txt
upgrades.txt
UpdateArticles.py

Looking at Claude Code (the agentic command line tool), here's a streamlined approach for a few hours of work:
Claude Code Implementation Plan
Core Objective
Build a minimal but complete solution that:
	1	Keeps Michael's PDF workflow
	2	Adds SEO via HTML extraction
	3	Provides a simple web UI for updates
	4	Can be built entirely by Claude Code in hours
Setup Instructions for Claude Code
# Create project structure
mkdir michaelgiltz-upgrade
cd michaelgiltz-upgrade

# Create these directories
mkdir scripts
mkdir admin
mkdir templates
mkdir extracted_content
Phase 1: Core Scripts (1 hour)
Tell Claude Code:
Create a Python script that:
1. Reads all PDFs from a 'scans' directory
2. Extracts text using PyPDF2 or pdfplumber
3. Generates SEO-friendly HTML pages with:
   - Proper meta tags
   - Link to original PDF
   - Clean, readable formatting
4. Updates existing HTML pages with both PDF and HTML links
5. Compatible with Python 2.7/3.x (check BlueHost version)
Phase 2: Simple Admin Interface (30 minutes)
Tell Claude Code:
Create a simple PHP admin interface:
1. admin/index.php with password protection (basic .htaccess)
2. Big button: "Update Site" that runs the Python script
3. Shows last update timestamp
4. Lists recently processed PDFs
5. No database needed - use simple text files for state
Phase 3: Migration Script (30 minutes)
Tell Claude Code:
Create a one-time migration script that:
1. Processes all existing PDFs (handle 1.87GB)
2. Generates HTML versions
3. Updates all existing HTML pages
4. Creates a simple progress indicator
5. Can resume if interrupted
Phase 4: Essential Features (1 hour)
Tell Claude Code:
Add to the HTML template:
1. Newsletter signup form (Substack embed code)
2. Social media links (BlueSky, Facebook)
3. Auto-updating copyright year using JavaScript
4. Basic responsive CSS for mobile
5. Simple search box that searches the extracted HTML content
Deployment Workflow
	1	Test locally first: # Have Claude Code create a test environment
	2	python3 scripts/process_pdfs.py --test
	3	
	4	Upload to BlueHost: # Simple FTP upload script
	5	python3 scripts/deploy.py
	6	
	7	Run migration: # SSH into BlueHost or run via web admin
	8	php admin/migrate.php
	9	
What to Tell Claude Code - Complete Project Brief
Project: Modernize michaelgiltz.com while keeping existing PDF workflow

Current State:
- BlueHost hosting with FTP access
- 1.87GB of PDFs in format: publication-Title_of_Article-MM-DD-YYYY.pdf
- Existing Python script (UpdateArticles.py) that generates links
- Static HTML pages with <!-- list:Publication --> markers

Requirements:
1. Keep PDF workflow unchanged
2. Extract text from PDFs for SEO
3. Create web admin panel (no command line)
4. Add newsletter signup and social links
5. Auto-updating copyright
6. Must run on standard BlueHost shared hosting

Build:
1. Enhanced Python script that extracts PDF text to HTML
2. PHP admin panel with "Update Site" button  
3. Migration script for existing PDFs
4. Updated HTML templates with modern features
5. Simple deployment script

Constraints:
- Use only libraries available on BlueHost (PyPDF2, standard PHP)
- No database required
- Must handle 1.87GB of existing PDFs
- Keep all existing URLs working
- Michael only needs to click one button to update
For Michael - New Workflow
	1	Setup (one time - we do this together):
	◦	Upload new scripts
	◦	Run migration
	◦	Test admin panel
	2	Daily use:
	◦	Create PDF as usual
	◦	Upload to server as usual
	◦	Go to michaelgiltz.com/admin
	◦	Click "Update Site"
	◦	Done!
Quick Training (30 minutes)
	•	Show admin panel
	•	Do one test article together
	•	Bookmark admin URL
	•	Give him simple troubleshooting guide
This approach:
	•	✅ Can be built by Claude Code in hours
	•	✅ Minimal learning curve for Michael
	•	✅ Solves all core problems
	•	✅ Works with existing hosting
	•	✅ Preserves 15 years of content
Ready to start with Claude Code?
